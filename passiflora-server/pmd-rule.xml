<?xml version="1.0"?>

<ruleset name="Custom Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        passiflora-pmd-rule
    </description>
    <exclude-pattern>/com/zerolinck/passiflora/common/util/lock/.*</exclude-pattern>
    <exclude-pattern>/com/zerolinck/passiflora/common/config/mybaits/TypeHandlerRegister.java</exclude-pattern>

    <!-- foreach 替换 for i -->
    <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach" />
    <!-- 三元表达式避免非等判断 -->
    <rule ref="category/java/codestyle.xml/ConfusingTernary" />
    <!-- 不能省略大括号 -->
    <rule ref="category/java/codestyle.xml/ControlStatementBraces">
        <properties>
            <property name="checkIfElseStmt" value="true" />
            <property name="checkSingleIfStmt" value="true" />
            <property name="checkWhileStmt" value="true" />
            <property name="checkForStmt" value="true" />
            <property name="checkDoWhileStmt" value="true" />
            <property name="checkCaseStmt" value="false" />
            <property name="allowEmptyLoop" value="false" />
        </properties>
    </rule>
    <!-- 不必要的分号 -->
    <rule ref="category/java/codestyle.xml/UnnecessarySemicolon" />
    <!-- 不必要的 return -->
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn" />
    <!-- 不必要的修饰符 -->
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier" />
    <!-- 不必要的强制转换 -->
    <rule ref="category/java/codestyle.xml/UnnecessaryCast" />
    <!-- 不必要的 import -->
    <rule ref="category/java/codestyle.xml/UnnecessaryImport" />
    <!-- 泛型使用类型推断 -->
    <rule ref="category/java/codestyle.xml/UseDiamondOperator" />
    <!-- 不必要的括号 -->
    <rule ref="category/java/codestyle.xml/UselessParentheses" />
    <!-- 使用短数组初始化方式 -->
    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer" />
    <!-- 长于 6 字符的数字，使用 _ 分隔 -->
    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals">
        <properties>
            <property name="acceptableDecimalLength" value="6" />
        </properties>
    </rule>
    <!-- 相同的异常捕获 -->
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches" />
    <!-- 可能为 null 的 equals 调用 -->
    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals" />
    <!-- 不使用添加空字符串的方式，将对象转换为 string -->
    <rule ref="category/java/performance.xml/AddEmptyString" />
    <!-- 避免实例化 string 对象 -->
    <rule ref="category/java/performance.xml/StringInstantiation" />
    <!-- 避免低效的 string buffer 拼接 -->
    <rule ref="category/java/performance.xml/InefficientStringBuffering" />
    <!-- 避免连续文字追加 -->
    <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends" />
    <!-- 连续追加应连续使用 append -->
    <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse" />
    <!-- 文本 equals，应字面量在前 -->
    <rule ref="category/java/bestpractices.xml/LiteralsFirstInComparisons" />
    <!-- 使用 try with resource -->
    <rule ref="category/java/bestpractices.xml/UseTryWithResources">
        <properties>
            <property name="closeMethods" value="close,closeQuietly" />
        </properties>
    </rule>
    <!-- 避免使用 printStackTrace() -->
    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace" />
    <!-- 不能省略 Override 注解 -->
    <rule ref="category/java/bestpractices.xml/MissingOverride" />
    <!-- 不能使用 System.(out|err).print -->
    <rule ref="category/java/bestpractices.xml/SystemPrintln" />
    <!-- 不必要的装箱 -->
    <rule ref="category/java/codestyle.xml/UnnecessaryBoxing" />
    <!-- 不必要的局部变量申明 -->
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn" />
    <!-- 禁止 4 层以上 if 嵌套 -->
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
        <properties>
            <property name="problemDepth" value="4" />
        </properties>
    </rule>
    <!-- 避免捕获后重新抛出异常 -->
    <rule ref="category/java/design.xml/AvoidRethrowingException" />
    <!-- 避免重新抛出被捕获的异常并包装在同一类型的新实例中 -->
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException" />
    <!-- 避免抛出 NullPointerException -->
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException" />
    <!-- 不要抛出原始的 RuntimeException、Throwable、Exception 或 Error，而应使用子类异常或错误 -->
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes" />
    <!-- 方法定义中抛出未检查异常 -->
    <rule ref="category/java/design.xml/AvoidUncheckedExceptionsInSignatures" />
    <!-- 使用 && 组合嵌套 if -->
    <rule ref="category/java/design.xml/CollapsibleIfStatements" />
    <!-- 使用相反运算符，而不是使用逻辑补码运算符否定整个表达式 -->
    <rule ref="category/java/design.xml/LogicInversion" />
    <!-- 避免在布尔表达式中进行不必要的比较 -->
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions" />
    <!-- 简化布尔返回 -->
    <rule ref="category/java/design.xml/SimplifyBooleanReturns" />
    <!-- 避免无用的 override -->
    <rule ref="category/java/design.xml/UselessOverridingMethod" />
    <!-- 避免无条件 If 语句 -->
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement" />
</ruleset>