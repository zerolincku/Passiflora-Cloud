import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

ext {
    // 默认是开发环境；切换生产环境使用 gradle -Denv=prod
    environment = System.getProperty("env", "dev")
    print('使用 ' + environment + ' 环境编译')
    configFile = file('../config.groovy')
    configMap = new ConfigSlurper(environment).parse(configFile.toURI().toURL()).toProperties()
    configMap['projectVersion'] = project.version
    configMap['env'] = environment
    configMap['isProd'] = (environment == 'prod') ? 'true' : 'false'
    configMap['isDev'] = (environment == 'dev') ? 'true' : 'false'
}

dependencies {
    implementation project(':modules:passiflora-feign')
    annotationProcessor platform(project(':modules:passiflora-bom'))
    testAnnotationProcessor platform(project(':modules:passiflora-bom'))

    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding'
    testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding'

    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

    // 非开发环境，排除 Swagger UI
    if (configMap['isDev'] == 'true') {
        implementation 'com.github.xiaoymin:knife4j-gateway-spring-boot-starter:4.4.0'
    }
}

jar {
    enabled = false
}

processResources {
    // src/main/resources 下的文件中 @key@ 的内容使用 config.groovy 里对应的进行替换
    from('src/main/resources') {
        filter(ReplaceTokens, tokens: configMap)
        duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
}